/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abcsecuritycompanysystem;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Sanele
 */
public class frmRegistrations extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmRegisterAccounts
     * @param strRegAccFor
     */
    public frmRegistrations(String strRegAccFor) {
        initComponents();
        
        lblHeading.setText("Register "+strRegAccFor+" Account");
                
        if(strRegAccFor.equals("admin")){
            txtPassword.setText("admin");
        }else if(strRegAccFor.equals("security")){
            txtPassword.setText("sec");
        }
        
        if(strRegAccFor.equals("admin")){
            JOptionPane.showMessageDialog(null, "Administrators accounts must be prefixed with 'admin'.");
        }else if(strRegAccFor.equals("security")){
            JOptionPane.showMessageDialog(null, "Security Gaurds accounts must be prefixed with 'sec'.");
        }
        
        txtNames.requestFocusInWindow();
    }
    
    private String strLevel;
    boolean boolAccountExists = false; //Declaration of a boolean variable
    frmLogin frmlogin = new frmLogin();
    
    public void mSetUserLevel(String strValue)
    {
        this.strLevel = strValue;
    }
    
    //A method that returns as string the current date.
    public String mTodayDate()
    {
        Date dt = new Date();
        SimpleDateFormat sm = new SimpleDateFormat("yyyy-MM-dd");
        return sm.format(dt);
    }
        
    //A method that accepts as argument a user level and return as string
    //a query that records security or client details to the database
    private String mRegisterSecurityOrClientAccountQuery(String strLevel)
    {
        return "INSERT INTO tblUsers(Name, DateOfBirth, Gender, Password, Addedby, Level)"
                    + "VALUES('"+txtNames.getText().toLowerCase()+"','"+
                    cboDateChooser.getSelection().toString().substring(1, 11)
                    +"','"+cboGender.getSelectedItem().toString()+"','"+
                    clsCryptography.mEncryptPassword(txtPassword.getText().toLowerCase())
                    +"','"+frmlogin.mGetUserID()+"','"+strLevel+"')";
    }
    
    //A method that returns as stringa query that records admins to the database.
    private String mRegisterAdminAccountQuery()
    {
        return "INSERT INTO tblAdmins(Name, DateOfBirth, Gender, Password)"
                    + "VALUES('"+txtNames.getText().toLowerCase()+"','"+
                    cboDateChooser.getSelection().toString().substring(1, 11)
                    +"','"+cboGender.getSelectedItem().toString()+"','"+
                    clsCryptography.mEncryptPassword(txtPassword.getText().toLowerCase())+"')";
    }
    
    //A method that returns as string a query that checks if
    //security or client details have already been
    //recorded in the database.
    private String mCheckIfSecurityOrClientAccountExistQuery()
    {
        return "SELECT * FROM tblUsers WHERE Name='"+txtNames.getText().toLowerCase()+"' AND DateOfBirth='"+
                cboDateChooser.getSelection().toString().substring(1, 11)+"' AND Password='"+
                clsCryptography.mEncryptPassword(txtPassword.getText().toLowerCase())+"'";
    }
    
    //A method that returns as string a query that checks if
    //admin personnel details have already been recorded in the database.
    private String mCheckIfAdminAccountExistQuery()
    {
        return "SELECT * FROM tblAdmins WHERE Name='"+txtNames.getText().toLowerCase()+"' AND DateOfBirth='"+
                cboDateChooser.getSelection().toString().substring(1, 11)+"' AND Password='"+
                clsCryptography.mEncryptPassword(txtPassword.getText().toLowerCase())+"'";
    }
    
    //A method that clears GUI text boxes.
    private void mClearTextFields()
    {
        txtNames.setText(null);
        txtPassword.setText(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dsktopRegisterAccounts = new javax.swing.JDesktopPane();
        lblHeading = new javax.swing.JLabel();
        lblIcon = new javax.swing.JLabel();
        lblNames = new javax.swing.JLabel();
        txtNames = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        cboDateChooser = new datechooser.beans.DateChooserCombo();
        lblGender = new javax.swing.JLabel();
        cboGender = new javax.swing.JComboBox<>();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnRegisterAccount = new javax.swing.JButton();

        dsktopRegisterAccounts.setBackground(new java.awt.Color(153, 153, 255));

        lblHeading.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblHeading.setText("Register Account");

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abcsecuritycompanysystem/Icon.jpeg"))); // NOI18N

        lblNames.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNames.setText("Name(s)");

        lblDOB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDOB.setText("Date Of Birth");

        cboDateChooser.setNothingAllowed(false);
        try {
            cboDateChooser.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }

        lblGender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblGender.setText("Gender");

        cboGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));

        lblPassword.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPassword.setText("Password");

        btnClear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnRegisterAccount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRegisterAccount.setText("Register");
        btnRegisterAccount.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRegisterAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterAccountActionPerformed(evt);
            }
        });

        dsktopRegisterAccounts.setLayer(lblHeading, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(lblIcon, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(lblNames, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(txtNames, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(lblDOB, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(cboDateChooser, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(lblGender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(cboGender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(lblPassword, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(txtPassword, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(btnClear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(btnCancel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dsktopRegisterAccounts.setLayer(btnRegisterAccount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout dsktopRegisterAccountsLayout = new javax.swing.GroupLayout(dsktopRegisterAccounts);
        dsktopRegisterAccounts.setLayout(dsktopRegisterAccountsLayout);
        dsktopRegisterAccountsLayout.setHorizontalGroup(
            dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                        .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dsktopRegisterAccountsLayout.createSequentialGroup()
                                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNames)
                                    .addComponent(lblDOB))
                                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtNames, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                                        .addGap(273, 273, 273)
                                        .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cboGender, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cboDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGender)
                                    .addComponent(lblPassword))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                                .addComponent(btnRegisterAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))
                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                        .addComponent(lblIcon)
                        .addGap(78, 78, 78)
                        .addComponent(lblHeading)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        dsktopRegisterAccountsLayout.setVerticalGroup(
            dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblHeading))
                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dsktopRegisterAccountsLayout.createSequentialGroup()
                        .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNames)
                            .addComponent(txtNames, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addComponent(lblDOB))
                    .addComponent(cboDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(cboGender, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(dsktopRegisterAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegisterAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dsktopRegisterAccounts)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dsktopRegisterAccounts)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterAccountActionPerformed
        clsQueryingMethods clsQueryingMethods = new clsQueryingMethods();
        
        if(txtNames.getText().equals("")){
            JOptionPane.showMessageDialog(null, "The Name(s) field cannot be left empty!");
            txtNames.requestFocusInWindow();
        }
        else{
            try{
                switch(strLevel){
                    case "admin":
                        if(Period.between((LocalDate.parse((cboDateChooser.getSelection().toString().substring(1, 11)).replace("/", "-"))),
                                LocalDate.parse(mTodayDate())).getYears() < 18)
                        {
                            JOptionPane.showMessageDialog(null, "Administrator account holders must be 18 years and above!");
                        }
                        else if((strLevel.equals("admin") && !(txtPassword.getText().startsWith("admin")))){
                            JOptionPane.showMessageDialog(null, "Administrators accounts must be prefixed with 'admin'.");
                            txtPassword.setText(null);
                            txtPassword.setText("admin");
                            txtPassword.requestFocusInWindow();
                        }
                        else{
                            boolAccountExists = clsQueryingMethods.mCheckIfRecordExists(mCheckIfAdminAccountExistQuery());
                            if(boolAccountExists){
                                JOptionPane.showMessageDialog(null, "This account already exists.");
                            }else{
                                clsQueryingMethods.mCreateRecord(mRegisterAdminAccountQuery(), btnRegisterAccount.getText());
                                mClearTextFields();
                            }
                        }
                        break;
                    case "security":
                        if(Period.between((LocalDate.parse((cboDateChooser.getSelection().toString().substring(1, 11)).replace("/", "-"))),
                                LocalDate.parse(mTodayDate())).getYears() < 18)
                        {
                            JOptionPane.showMessageDialog(null, "Security guards must be 18 years and above!");
                        }
                        else if((strLevel.equals("security") && !(txtPassword.getText().startsWith("sec")))){
                            JOptionPane.showMessageDialog(null, "Security Gaurds accounts must be prefixed with 'sec'.");
                            txtPassword.setText(null);
                            txtPassword.setText("sec");
                            txtPassword.requestFocusInWindow();
                        }
                        else{
                            boolAccountExists = clsQueryingMethods.mCheckIfRecordExists(mCheckIfSecurityOrClientAccountExistQuery());
                            if(boolAccountExists){
                                JOptionPane.showMessageDialog(null, "This account already exists.");
                            }else{
                                clsQueryingMethods.mCreateRecord(mRegisterSecurityOrClientAccountQuery(strLevel), btnRegisterAccount.getText());
                                mClearTextFields();
                            }
                        }
                        break;
                    case "client":
                        if(Period.between((LocalDate.parse((cboDateChooser.getSelection().toString().substring(1, 11)).replace("/", "-"))),
                                LocalDate.parse(mTodayDate())).getYears() < 18)
                        {
                            JOptionPane.showMessageDialog(null, "Client account holders must be 18 years and above!");
                        }
                        else if(txtPassword.getText().equals("")){
                            JOptionPane.showMessageDialog(null, "Clients require a password!");
                        }
                        else{
                            boolAccountExists = clsQueryingMethods.mCheckIfRecordExists(mCheckIfSecurityOrClientAccountExistQuery());
                            if(boolAccountExists){
                                JOptionPane.showMessageDialog(null, "This account already exists.");
                            }else{
                                clsQueryingMethods.mCreateRecord(mRegisterSecurityOrClientAccountQuery(strLevel), btnRegisterAccount.getText());
                                mClearTextFields();
                            }
                        }
                    }
            }catch(StringIndexOutOfBoundsException e){
                JOptionPane.showMessageDialog(null, "The Date Of Birth field cannot be left empty!");
            }
        }
    }//GEN-LAST:event_btnRegisterAccountActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        mClearTextFields();
        if(strLevel.equals("admin")){
            txtPassword.setText("admin");
        }else if(strLevel.equals("security")){
            txtPassword.setText("sec");
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.hide();
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnRegisterAccount;
    private datechooser.beans.DateChooserCombo cboDateChooser;
    private javax.swing.JComboBox<String> cboGender;
    private javax.swing.JDesktopPane dsktopRegisterAccounts;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblNames;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JTextField txtNames;
    private javax.swing.JTextField txtPassword;
    // End of variables declaration//GEN-END:variables
}
